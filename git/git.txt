<<체크>> 
	- 
	- 
	
	


○ 깃 설치

	<Reference> 
	https://taewow.tistory.com/13
	https://git-scm.com/book/ko/v2/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-Git-%EC%84%A4%EC%B9%98
	https://git-scm.com/download/win

	- 사용자 이름/이메일 등록
		git config --global user.name "사용자이름"
		git config --global user.email "이메일@abc.com"	

	
○ 깃허브 설정
	<Reference> 
	https://query.tistory.com/entry/GitHub-%EB%A6%AC%ED%8F%AC%EC%A7%80%ED%86%A0%EB%A6%AC-PublicPrivate-%EB%B3%80%EA%B2%BD%EB%B0%A9%EB%B2%95

	- [GitHub] 리포지토리 공개/비공개 설정 변경 방법 2021. 8. 17. 20:29
		
	Settings 페이지로 이동한 뒤, 페이지를 맨 밑에까지 스크롤해서 내리면, 붉은색 테두리에 붉은색 버튼들로 이루어진 Danger Zone을 발견하실 수 있습니다. 여기서 첫 번째 메뉴인 Change repository visibility (This repository is currently public 혹은 private)를 변경하기 위해 우측에 위치한 Change visibility를 선택합니다. 






○ 깃, 깃허브 사용법
	<Reference> 
	https://y-oni.tistory.com/159?category=939531
	https://y-oni.tistory.com/192?category=939531
	https://mintaku.tistory.com/9
	https://sudo-minz.tistory.com/10
	만들면서 배우는 Git GitHub입문 / 윤웅식 지음 / 2015
	https://computer-science-student.tistory.com/211
	https://webisfree.com/2021-09-01/[git]-git-%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B2%80%EC%83%89%EC%9C%BC%EB%A1%9C-%EC%BB%A4%EB%B0%8B-%ED%95%B4%EC%8B%9C-%EC%B0%BE%EA%B8%B0



		
	스테이징 영역(Staging Area): 작업중인 디렉토리에서 스테이징 영역에 파일 추가, add	
	$git add 파일명

	리파지토리(Repository): 스테이징 영역의 파일을 로컬저장소(내컴퓨터)에 반영, commit
	$ git commit -m "내용"

	깃허브 리파지토리(Repository): 로컬저장소의 내역을 원격저장소(깃허브)에 업로드, push
	$ git push 원격저장소별칭 로컬프랜치이름
	$ git push origin main	or 	$ git push origin --all



	$ git status

	$ git init


	Git Bash에서 git branch -M main 명령어를 입력하면
	기본 브랜치가 master가 아닌 main으로 변경
	git branch -M main
	

	git init
		깃으로 관리하겠다는 선언.
		깃으로 관리할 프로젝트 폴더 경로에서 커맨드라인으로 입력.
		해당 폴더 내에 숨김 폴더로 .git 이라는 폴더가 생성된다.

	.gitignore 파일 생성
		깃에서 제외시킬 파일 및 폴더 정보를 담는 설정 파일.
		.gitignore 라는 이름의 텍스트 파일.
		.gitignore 문법 예시



	git add 파일명
		스테이지 단계로 스테이징 시키는 명령어.
		>>파일명 대신 점(.)을 쓰면 변경사항이 있는 모든 파일을 스테이징한다.<<

	git commit -m "메시지"
		커밋
		스테이징된 파일들의 변경사항을 적용하여 새로운 버전으로 저장.
		메시지와 함께 저장

	
	add 와 commit 두 명령어의 반복으로 기본적인 버전 관리
		git pull
		git init - 코드 수정 -  git add . -  git commit -m ‘변경내용’
		git push

	git commit -am "스태이징과 커밋을 한번에!"
	가끔 이전 커밋에 미쳐 포함하지 못한 코드가 있을 수 있는데, 이전 커밋에 현재 변경 내용을 추가할 때는 --amend 옵션을 사용


	git remote add origin 깃저장소주소

	git remote -v

	git show : 커밋 정보 출력

	git log : 지금까지 만든 커밋 확인

	git log --grep "검색어"
	git log --grep "[f|F]ont"
	전체 브랜치에서 찾길 원하는 경우 --all 옵션을 사용합니다.
		git log --all --grep "인사말"


	git checkout 커밋아이디	: 해당 커밋으로 이동
	git check -


○ 깃, 깃허브 사용법 : 깃허브의 데이터 가져오기
	git clone 저장소주소



○ 사용자이름, 이메일 설정,삭제 방법

	<Reference> 
	https://www.lainyzine.com/ko/article/how-to-set-git-repository-username-and-email/
	https://dlsdn73.tistory.com/1171
	https://computer-science-student.tistory.com/364

	- 저장소 별로 git 사용자와 이메일 정보 설정 : --global 없이 git config 사용
		$ git config user.name "이름"
		$ git config user.email 이메일주소
		이 설정은 저장소 별로 저장되며 global 옵션으로 설정한 정보보다 우선적으로 사용됩니다.
	- 현재 저장소의 user,email 설정값 확인
		$ git config user.name
		설정된 이름
		$ git config user.email
		설정된 이메일
	- 변경 : 초기 설정과 같은 방식으로. (overwrite 개념?)

	- Git 사용자 이름과 이메일 정보 삭제
		# 전역 설정 삭제
		$ git config --global --unset user.name
		$ git config --global --unset user.email

		# 개별 저장소 설정 삭제
		$ git config --unset user.name
		$ git config --unset user.email

	- GitHub 계정에는 여러 개의 이메일을 연결할 수 있음


○ GitHub 계정 생성 및 초기 셋업

	<Reference> 
	https://www.lainyzine.com/ko/article/summary-of-how-to-use-github-for-developers/#github-%EA%B3%84%EC%A0%95-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EC%B4%88%EA%B8%B0-%EC%85%8B%EC%97%85



○ GitHub 2단계 인증(OTP) 활성화하는 방법
	<Reference> 
	https://www.lainyzine.com/ko/article/github-activate-two-factor-authentication/

	GitHub에서는 Two Factor 인증을 지원하고 있습니다. 
	이를 활성화하려면 오른쪽 상단의 자신의 프로필 이미지를 클릭하고, Settings를 클릭해줍니다.

	오른쪽 사이드바에서 Account security 메뉴

	패스워드 변경 폼 아래로 Two-factor authentication 메뉴가 있는 것을 확인할 수 있습니다. 
	가운데 Enable two-factor authentication 버튼을 클릭해 Two factor 인증을 활성화합니다. 
	GitHub는 개발자에게는 특히 중요한 서비스이므로 반드시 이중 인증 활성화해두는 것이 좋습니다.

	여기서는 왼쪽의 Set up using an app을 선택해줍니다. 
	이중 인증을 지원하는 모바일 앱으로는 Google Authenticator, Authy, 1Password 등이 있습니다. 
	특히 1Password는 데스크탑에서도 이중 인증을 활용할 수 있어서 좀 더 편리하게 활용할 수 있습니다.