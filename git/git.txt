<<체크>> 
	- 
	- 
	
	
○ 

	<Reference> 



○  브랜치 전략. git flow

	<Reference> 
	나의 Git Flow 적응기(겉핥기로 10분만에 익히고 써먹어보자, 백각이불여일행!)	정아마추어 2019. 9. 2. 21:32
	https://jeong-pro.tistory.com/196

	Git flow, GitHub flow, GitLab flow 15. 12. 16. /  19. 03. 24
	https://ujuc.github.io/2015/12/16/git-flow-github-flow-gitlab-flow/

	Git vs GitHub vs GitLab Flow
	https://github.com/gyoogle/tech-interview-for-developer/blob/master/ETC/Git%20vs%20GitHub%20vs%20GitLab%20Flow.md

	우린 Git-flow를 사용하고 있어요   Oct.30.2017 나동호
	https://techblog.woowahan.com/2553/

	[Git] Upstream, Downstream, Origin	Alledy 2019. 9. 10. 16:23
	https://developer-alle.tistory.com/315

	https://inpa.tistory.com/entry/GIT-%E2%9A%A1%EF%B8%8F-github-flow-git-flow-%F0%9F%93%88-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5
	적용할 flow를 고민해보자.

	

○ git은 어떻게 파일을 저장하고 복구하는가

	<Reference> 
	https://kotlinworld.com/300
	https://kwoncheol.me/posts/git-rename-inference

	변경사항을 압축,저장하는 object 폴더
	



○ 깃 설치

	<Reference> 
	https://taewow.tistory.com/13
	https://git-scm.com/book/ko/v2/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-Git-%EC%84%A4%EC%B9%98
	https://git-scm.com/download/win

	- 사용자 이름/이메일 등록
		git config --global user.name "사용자이름"
		git config --global user.email "이메일@abc.com"	

	
○ 깃허브 설정
	<Reference> 
	https://query.tistory.com/entry/GitHub-%EB%A6%AC%ED%8F%AC%EC%A7%80%ED%86%A0%EB%A6%AC-PublicPrivate-%EB%B3%80%EA%B2%BD%EB%B0%A9%EB%B2%95

	- [GitHub] 리포지토리 공개/비공개 설정 변경 방법 2021. 8. 17. 20:29
		
	Settings 페이지로 이동한 뒤, 페이지를 맨 밑에까지 스크롤해서 내리면, 붉은색 테두리에 붉은색 버튼들로 이루어진 Danger Zone을 발견하실 수 있습니다. 여기서 첫 번째 메뉴인 Change repository visibility (This repository is currently public 혹은 private)를 변경하기 위해 우측에 위치한 Change visibility를 선택합니다. 


	
○ 깃, 깃허브 사용법
	<Reference> 
	https://y-oni.tistory.com/159?category=939531
	https://y-oni.tistory.com/192?category=939531
	https://mintaku.tistory.com/9
	https://sudo-minz.tistory.com/10
	만들면서 배우는 Git GitHub입문 / 윤웅식 지음 / 2015
	https://computer-science-student.tistory.com/211
	https://webisfree.com/2021-09-01/[git]-git-%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%8B%9C%EC%A7%80-%EA%B2%80%EC%83%89%EC%9C%BC%EB%A1%9C-%EC%BB%A4%EB%B0%8B-%ED%95%B4%EC%8B%9C-%EC%B0%BE%EA%B8%B0



		
	스테이징 영역(Staging Area): 작업중인 디렉토리에서 스테이징 영역에 파일 추가, add	
	$git add 파일명

	리파지토리(Repository): 스테이징 영역의 파일을 로컬저장소(내컴퓨터)에 반영, commit
	$ git commit -m "내용"

	깃허브 리파지토리(Repository): 로컬저장소의 내역을 원격저장소(깃허브)에 업로드, push
	$ git push 원격저장소별칭 로컬프랜치이름
	$ git push origin main	or 	$ git push origin --all



	$ git status

	$ git init


	Git Bash에서 git branch -M main 명령어를 입력하면
	기본 브랜치가 master가 아닌 main으로 변경
	git branch -M main
	

	git init
		깃으로 관리하겠다는 선언.
		깃으로 관리할 프로젝트 폴더 경로에서 커맨드라인으로 입력.
		해당 폴더 내에 숨김 폴더로 .git 이라는 폴더가 생성된다.

	.gitignore 파일 생성
		깃에서 제외시킬 파일 및 폴더 정보를 담는 설정 파일.
		.gitignore 라는 이름의 텍스트 파일.
		.gitignore 문법 예시



	git add 파일명
		스테이지 단계로 스테이징 시키는 명령어.
		>>파일명 대신 점(.)을 쓰면 변경사항이 있는 모든 파일을 스테이징한다.<<

	git commit -m "메시지"
		커밋
		스테이징된 파일들의 변경사항을 적용하여 새로운 버전으로 저장.
		메시지와 함께 저장

	
	add 와 commit 두 명령어의 반복으로 기본적인 버전 관리
		git pull
		git init - 코드 수정 -  git add . -  git commit -m ‘변경내용’
		git push

	git commit -am "스태이징과 커밋을 한번에!"
	가끔 이전 커밋에 미쳐 포함하지 못한 코드가 있을 수 있는데, 이전 커밋에 현재 변경 내용을 추가할 때는 --amend 옵션을 사용


	git remote add origin 깃저장소주소

	git remote -v

	git show : 커밋 정보 출력

	git log : 지금까지 만든 커밋 확인

	git log --grep "검색어"
	git log --grep "[f|F]ont"
	전체 브랜치에서 찾길 원하는 경우 --all 옵션을 사용합니다.
		git log --all --grep "인사말"


	git checkout 커밋아이디	: 해당 커밋으로 이동
	git check -

	git commit -am
		ex) git commit -am "git commit -am test"



○ 팀 개발을 위한 Git GitHub 시작하기 / 정호영,진유림 지음 / 2020
	<Reference> 
	팀 개발을 위한 Git GitHub 시작하기 / 정호영,진유림 지음 / 2020

	Git은 도구, 공부만으로는 늘지 않습니다. 책을 읽었다면 이제 Git을 열심히 사용할 차례입니다.
	추천서적 : Pro Git 2판(https://git-scm.com/book/ko/v2)
		 Git from the Bottom-up(https://jwiegley.github.io/git-from-the-bottom-up)
	Q/A
		https://github.com/Cat-Hanbit/README

	7일에 끝내는 학습진도표
		1일차 : Ch 0,1,2	빠르게 실습해보고 감을 익힙니다. 
			GUI실습환경설치,내 컴퓨터에서 버전관리
			
		2일차 : Ch 3	여러명이 Git, GitHub으로 협업, 버전관리하는 방법. 브랜치 
		3일차 : Ch 4	원격저장소를 복사해서 또 다른 원격저장소를 만들고, 
				둘 이상의 원격저장소에서 버전관리하는 방법 
		4일차 : Ch 5	개발 현장에서 유용하게 사용하는 5가지 편리한 기능
		5일차 : Ch 6	소스트리에서 실습했던 내용 중 기본적인 기능을 CLI 명령어로 복습
				CLI명령어가 소스트리와 어떻게 연계되는지 알수 있음
		6일차 : Ch 7	브랜치와 관련된 핵심 기능을 CLI 명령어로 복습
		7일차 : Ch 8,9	Git의 동작 원리, 인증

	원본저장소의 소유자가 협력자로 등록
		Settings - Collaborators, Add Collaborator	
	※풀리퀘스트 pull request / fork 후 커밋, 원본소유자에게 병합 요청
	브랜치 : 평행세계, 포크 : 평행우주
			포크 : 원본저장소의 이력을 보려면 따로 주소를 추가해야 한다.
	
	※리베이스 Rebase 묵은 커밋을 방금한 커밋처럼
		이력을 조작하고 푸시하는 건 다른 개발자에게 위험한 행위여서 
		무조건 혼자 사용하는 브랜치에서만 해야 함. 
		특수한 옵션을 붙여서 푸시해야함. 강제 푸시

	Git과 GitHub으로 프로젝트 관리하는 방법
		1. GitHub에서 원격저장소를 만들고 이를 내 컴퓨터에 클론한다
		2. 내 컴퓨터에 먼저 로컬저장소를 만들고 GitHub에 원격 저장소를 만들어
			로컬저장소에 원격 저장소 주소를 remote add 한다.

	amend : 마지막 커밋 수정하기

	cherry-pick : 커밋하나만 브랜치에 붙이기 (브랜치 전략 참고해보기)

	reset : 옛날 커밋으로 브랜치를 되돌리기

	revert : 커밋의 변경사항을 되돌리기

	stash : 변경사항을 잠시 다른 곳에 저장, 커밋은 x


	git status		git status -s
	워킹트리 : 	로컬저장소가 있는 현재 폴더. 
			'커밋을 체크아웃하면 생성되는 파일과 디렉토리'
		워크 트리, 워킹 디렉토리, 작업 디렉토리, 작업 폴더
	로컬저장소 :	.git 폴더가 로컬저장소. 커밋,커밋을 구성하는 객체, 
				스테이지가 모두 이 폴더에 저장
	원격저장소 :	로컬저장소를 업로드하는 곳. GitHub.
	Git 저장소 :	Git 명령으로 관리할 수 있는 폴더 전체를 일반적으로
			Git 프로젝트 혹은 Git 저장소 라고 부름.
			엄밀하게는 로컬저장소를 의미하지만 넓은 의미로
			작업폴더를 의미하기도 함.

	옵션 설정하기 (우선 순위는 지역 > 전역 > 시스템)
		git config --global <옵션명>			지정한 전역 옵션 내용 보기
		git config --global <옵션명> <새로운 값>	지정한 전역 옵션 값을 새로 설정
		git config --global --unset <옵션명>		지정한 전역 옵션 값을 삭제
		git config --local <옵션명>			지정한 지역 옵션 내용 보기
		git config --local <옵션명> <새로운 값>	지정한 지역 옵션 값을 새로 설정
		git config --local --unset <옵션명>		지정한 지역 옵션 값을 삭제
		git config --system <옵션명>			지정한 시스템 옵션 내용 보기
		git config --system <옵션명> <새로운 값>	지정한 시스템 옵션 값을 새로 설정
		git config --system --unset <옵션명>		지정한 시스템 옵션 값을 삭제
		git config --list				현재 프로젝트의 모든 옵션값 보기


		git config --global core.editor		기본 에디터 확인

	기본 CLI 명령어
	
		git add 파일1 파일2 ...	파일들을 스테이지에 추가
		git commit		스테이지에 있는 파일들을 커밋
		git commit -a		변경된 파일과 삭제된 팡리이 자동으로 스테이징,커밋
					untracked 파일은 커밋되지 않음
		git push [-u] [원격저장소별명] [브랜치이름]
					현재 브랜치에서 새로 생성한 커밋들을 원격저장소에 업로드
					한번 등록한 후에는 git push 만 입력 해도됨
					
		git pull			원격저장소의 변경사항을 워킹트리에 반영
					git fetch + git merge 명령
		git fetch [원격저장소별명] [브랜치이름]
					원격저장소의 브랜치와 커밋을 로컬저장소와 동기화
					옵션을 생략하면 모은 원격저장소에서 모든 브랜치를 가져옴
		git merge 브랜치이름
					지정한 브랜치의 커밋들을 현재 브랜치 및 워킹트리에 반영

		git reset 파일		언스테이징, 스테이지에서 내리기
					soft, mixed, hard 세가지 옵션, 옵션없이 사용하면 mixed로 동작

		git log			현재 브랜치의 커밋 이력을 보는 명령
			git log -n<숫자>	전체 커밋 중에서 최신 n개의 커밋만보기
			git log --oneline --graph --all --decorate
				--oneline	커밋 메시지를 한줄로 요약. 생략하면 자세히 표시
				--graph	브랜치 흐름을 그래프로 보여줌
				--decorate 원래는 --decorate=short 옵션을 의미. 
					브랜치와 태그 등의	참조를 간결히 표시
				--all	all 옵션이 없는 경우, HEAD와 관계없는 옵션은 보여주지 않음
				
			ex) 
			git log
			git log --oneline
			git log --oneline --graph --decorate
			git log --oneline --graph --all --decorate
			git log --oneline -n5

		좋은 커밋 메시지의 7가지 규치
			1. 제목과 본문을 빈 줄로 분리
			2. 제목은 50자 이내로
			3. 제목을 영어로 쓸 경우, 첫 글자는 대문자로
			4. 제목에 마침표를 넣지 않는다
			5. 제목을 영어로 쓸 경우 동사원형(현재형)으로 시작
			6. 본문을 72자 단위로 줄바꿈
			7. 어떻게 보다 무엇과 왜를 설명
		git help <명령어>		: 도움말 기능 사용하기
			git help status
			git help commit

	원격저장소 관련 CLI 명령어
		git remote add <원격저장소 이름> <원격저장소 주소>
			원격저장소를 등록. 여러개 등록할 수 있지만 같은 별명의 원격 저장소는
			하나만 가질수 있음. 통상 첫 번째 원격저장소를 origin으로 지정
		git remote -v
			원격저장소 목록을 살펴봄

		git push -u origin main	// push와 동시에 업스트림 지정
			origin 저장소의 main 브랜치가 로컬저장소의 main 브랜치의 업스트림으로
			지정되어 이후 git push 가능

		git clone <저장소주소> [새로운 폴더명]
			폴더명을 생략할 경우 프로젝트 이름과 같은 이름의 폴더가 새로 생성됨
			저장소 주소가 꼭 원격일 필요가 없으며 로컬 저장소도 git clone 명령으로
			복제 가능
		git pull
			pull = fetch + merge


	커밋하면 커밋 객체가 생김. 커밋 객체에는 부모 커밋에 대한 참조와 실제 커밋을 구성하는
		파일 객체가 들어 있음

	브랜치 사용 이유
		- 새로운 기능 추가
		- 버그 수정
		- 병합과 리베이스 테스트
		- 이전 코드 개선
		- 특정 커밋으로 돌아가고 싶을 때


	git branch [-v]	로컬 저장소의 브랜치 목록을 보는 명령. -v 를 사용하면 마지막 커밋도 함께 표시
			표시된 브랜치 중에서 이름 왼쪽에 *가 붙어 있으면 HEAD 브랜치
	git branch [-f] <브랜치이름> [커밋체크섬]
		새로운 브랜치 생성. 커밋체크섬 값을 주지 않으면 HEAD 로 부터 브랜치를 생성
		이미 있는 브랜치를 다른 커밋으로 옮기고 싶을때는 -f 옵션 사용
	git branch -r[v]	원격 저장소의 브랜치를 보고 싶을때 사용
	git checkout <브랜치이름>
		특정 브랜치로 체크아웃할 때 사용
	git checkout -b <브랜치이름> <커밋 체크섬>
		특정 커밋에서 브랜치를 새로 생성하고 동시에 체크아웃까지 함
	git merge <대상 브랜치>
		현재 브랜치와 대상 브랜치를 병합할 때 사용
	git rebase <대상 브랜치>
		내 브랜치의 커밋들을 대상 브랜치에 재배치시킴 주의 필요
	git branch -d <브랜치이름>
		특정 브랜치를 삭제할 때 사용. HEAD 브랜치나 병합되지 않은 브랜치는 삭제 불가
	git branch -D <브랜치이름>
		브랜치를 강제로 삭제하는 명령. -d로 삭제할 수 없는 브랜치를 지우고 싶을때 사용
		주의 필요	

	브랜치 만들기
	git log --online		1) 커밋로그 보기
	git branch		2) 현재 브랜치 확인
	git branch mybranch1	3) 새로운 브랜치 생성
	git branch		4) 현재 브랜치 확인
	git log --online --all	5) 변경된 브랜치 확인

	HEAD에 대해 반드시 기억할 점
		1. HEAD는 현재 작업 중인 브랜치를 가리킨다.
		2. 브랜치는 커밋을 가리키미로 HEAD도 커밋을 카리킨다.
		3. 결국 HEAD는 현재 작업 중인 브랜치의 최근 커밋을 가리킨다.

	revert를 사용하여 커밋을 되돌려야 하는 경우
		C1 < F1 < C2 < F2 < C3 (main)

		revert를 실행할때는 최신 커밋부터 취소하는 것이 좋음
		git revert F2
 		git revert F1

		C1 < F1 < C2 < F2 < C3 < RF2 < RF1 (main)

			F2와 F1을 취소하는 커밋을 각각 만들어냄. 이전 히스토리를 변경하지 않고도
			깔끔하게 히스토리 중간의 여러 커밋 내용을 작업 이전 상태로 되돌릴 수 있으므로
			현업에서 유용하게 사용 됨.

	CLI로 checkout 하기
		브랜치의 내용을 워킹트리에 반영할 때 사용

		reset --hard	 reset은 현재 브랜치를 특정 커밋으로 되돌릴 때 사용.
			git reset --hard 명령을 실행하면, 현재 브랜치를 지정한 커밋으로 옮긴 후
				해당 커밋의 내용을 작업 폴더에도 반영.
			
		HEAD~<숫자>
			HEAD~은 헤드의 부모 커밋, HEAD~2는 헤드의 할아버지 커밋
			HEAD~n은 n번째 위쪽 조상이라는 뜻

		HEAD^<숫자>
			HEAD^은 똑같이 부모 커밋. 반면 HEAD^2는 두 번째 부모를 가르킨다.
			병합 커밋처럼 부모가 둘 이상인 커밋에서만 의미가 있다.

		현재 브랜치를 두 단계 이전으로 되돌리기
			git reset --hard HEAD~2		브랜치 되돌리기
			git log --online --all 		로그 확인


	CLI로 3-way 병합하기

	CLI로 rebase 해보기
	
	Git 내부 동작 원리

		git add 명령의 동작 원리




	



○ 깃, 깃허브 사용법 : 깃허브의 데이터 가져오기
	git clone 저장소주소



○ 사용자이름, 이메일 설정,삭제 방법

	<Reference> 
	https://www.lainyzine.com/ko/article/how-to-set-git-repository-username-and-email/
	https://dlsdn73.tistory.com/1171
	https://computer-science-student.tistory.com/364

	- 저장소 별로 git 사용자와 이메일 정보 설정 : --global 없이 git config 사용
		$ git config user.name "이름"
		$ git config user.email 이메일주소
		이 설정은 저장소 별로 저장되며 global 옵션으로 설정한 정보보다 우선적으로 사용됩니다.
	- 현재 저장소의 user,email 설정값 확인
		$ git config user.name
		설정된 이름
		$ git config user.email
		설정된 이메일
	- 변경 : 초기 설정과 같은 방식으로. (overwrite 개념?)

	- Git 사용자 이름과 이메일 정보 삭제
		# 전역 설정 삭제
		$ git config --global --unset user.name
		$ git config --global --unset user.email

		# 개별 저장소 설정 삭제
		$ git config --unset user.name
		$ git config --unset user.email

	- GitHub 계정에는 여러 개의 이메일을 연결할 수 있음


○ GitHub 계정 생성 및 초기 셋업

	<Reference> 
	https://www.lainyzine.com/ko/article/summary-of-how-to-use-github-for-developers/#github-%EA%B3%84%EC%A0%95-%EC%83%9D%EC%84%B1-%EB%B0%8F-%EC%B4%88%EA%B8%B0-%EC%85%8B%EC%97%85



○ GitHub 2단계 인증(OTP) 활성화하는 방법
	<Reference> 
	https://www.lainyzine.com/ko/article/github-activate-two-factor-authentication/

	GitHub에서는 Two Factor 인증을 지원하고 있습니다. 
	이를 활성화하려면 오른쪽 상단의 자신의 프로필 이미지를 클릭하고, Settings를 클릭해줍니다.

	오른쪽 사이드바에서 Account security 메뉴

	패스워드 변경 폼 아래로 Two-factor authentication 메뉴가 있는 것을 확인할 수 있습니다. 
	가운데 Enable two-factor authentication 버튼을 클릭해 Two factor 인증을 활성화합니다. 
	GitHub는 개발자에게는 특히 중요한 서비스이므로 반드시 이중 인증 활성화해두는 것이 좋습니다.

	여기서는 왼쪽의 Set up using an app을 선택해줍니다. 
	이중 인증을 지원하는 모바일 앱으로는 Google Authenticator, Authy, 1Password 등이 있습니다. 
	특히 1Password는 데스크탑에서도 이중 인증을 활용할 수 있어서 좀 더 편리하게 활용할 수 있습니다.


○ GIT - Commit한 메세지 문구 수정

	<Reference> 
	https://jw910911.tistory.com/77
	https://velog.io/@mayinjanuary/git-%EC%BB%A4%EB%B0%8B-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0-changing-commit-message

	
	1. 아직 커밋이 local 에 있을 때
		아직 로컬에서 commit 을 하고 push 는 하지 않아 remote 에 올라가지 않은 상태일 경우

		1.1. 가장 최근의 commit 수정
			git commit --amend
			위와 같이 amend 를 이용하면 가장 마지막에 commit 한 내용을 수정할 수 있습니다.
			git commit --amend 를 사용하고 커밋을 수정할 수 있는 창이 뜨면, 
			수정을 완료한 후 esc -> :wq(저장 + 창 닫기) 를 해주면 됩니다.

			or

			git commit --amend -m "바꿀 메시지"

		1.2. 더 오래된 commit 수정 or 한 번에 여러 commit 수정
			커맨드 라인에 git log 를 쳐 보세요.

			로그에서 여태 자신이 한 커밋을 쭉 확인 후 어떤 커밋을 수정할 것인지 확인합니다.
			만일 위에서부터 세 번째 커밋을 수정해야 한다면

			git rebase -i HEAD~3
			위 커맨드를 사용하면 현재 작업중인 브랜치의 가장 최근 commit 3개를 보여줌.
			(3이 들어간 자리에 체크하길 원하는 commit 의 갯수를 집어넣으시면 됩니다!)

			그럼 다음과 같은 창이 뜹니다.

				pick e499d89 Delete CNAME
				pick 0c39034 Better README
				pick f7fde4a Change the commit message but push the same commit.

			이젠 수정하고 싶은 커밋 옆의 pick 이라는 문구를 reword 로 바꿔 주면 됩니다.

			두 번째 커밋과 세 번째 커밋을 수정해보도록 하겠습니다.

				pick e499d89 Delete CNAME
				reword 0c39034 Better README
				reword f7fde4a Change the commit message but push the same commit.
			esc -> :wq 를 통해 커밋 리스트를 저장을 해주고 나면, 
			두 개의 커밋을 각각 수정할 수 있는 창이 순서대로 띄워집니다.
			원하는대로 커밋을 수정하시고, :wq 를 통해 저장해주세요.

			수정이 잘 되었는지 git log 를 통해 확인합니다.


	2. 이미 커밋을 push 해 remote 에 올린 상황일 때
		커밋이 이미 remote 에 적용된 상황이라면, 
		force 를 통해 수정된 커밋을 강제로 push 해주어야 합니다.

		github 공식 문서에 따르면 force pushing 을 최대한 사용하지 않아야 한다고 하네요. 
		push 된 커밋의 로그를 갖고 있던 다른 팀원들이 로그를 수동으로 수정해줘야 함

		local 에서 commit 메세지를 수정한 후, 아래 커맨드를 실행하면 됩니다.

		git push --force 브랜치이름
	